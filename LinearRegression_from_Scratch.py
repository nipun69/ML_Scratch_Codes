# -*- coding: utf-8 -*-
"""assign3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S9AYiiH688SFdhqpElDCOhP3-Eltn6OM
"""

# Name- Nipun Bharadwaj
# Roll Number- 22AG30027
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Implementation
class LR_ClosedForm:
    def __init__(self):
        self.coeff=None
    def fit(self,X,y):

        X_augmented=np.c_[np.ones(X.shape[0]),X]

        XTX_inverse=np.linalg.inv(np.dot(X_augmented.T,X_augmented))
        self.coeff=np.dot(np.dot(XTX_inverse,X_augmented.T),y)
    def predict(self,X):
        X_augmented = np.c_[np.ones(X.shape[0]), X]
        y_pred=np.dot(X_augmented ,self.coeff)
        return y_pred

class LR_Gradient(object):
    def __init__(self, learning_rate=0.01, num_iter=1000):
        self.learning_rate = learning_rate
        self.num_iter = num_iter

    def fit(self, X, y):
        X_augmented = np.c_[np.ones(X.shape[0]), X]
        self.theta = np.zeros(X_augmented.shape[1])

        for i in range(self.num_iter):
            random_index = np.random.randint(X_augmented.shape[0])
            xi = X_augmented[random_index:random_index+1]
            yi = y[random_index:random_index+1]

            gradients = 2 * xi.T.dot(xi.dot(self.theta) - yi)
            self.theta = self.theta - self.learning_rate * gradients

        self.coeff = self.theta # update coeff attribute

    def predict(self, X):
        X_augmented = np.c_[np.ones(X.shape[0]), X]
        y_pred = np.dot(X_augmented, self.coeff)
        return y_pred

df=pd.read_csv("BostonHousingDataset.csv")
df

df=df.dropna().drop(columns= ['B','LSTAT'])
df

# Experiment 1
plt.figure(figsize=(12, 4))

plt.subplot(1, 3, 1)
sns.histplot(df['NOX'], bins=20, kde=True, color='skyblue', edgecolor='black')
plt.title('Histogram for NOX')

plt.subplot(1, 3, 2)
sns.histplot(df['RM'], bins=20, kde=True, color='salmon', edgecolor='black')
plt.title('Histogram for RM')

plt.subplot(1, 3, 3)
sns.histplot(df['AGE'], bins=20, kde=True, color='green', edgecolor='black')
plt.title('Histogram for AGE')

plt.tight_layout()
plt.show()

correlation_matrix = df.corr()
correlation_matrix

# Experiment 2
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix,annot=True,cmap="coolwarm")
plt.title('Correlation Matrix Heatmap')
plt.show()

dataset_altered_target=df['MEDV'].values.astype(float)
dataset_altered_target

# Experiment 3
X=df.drop(columns =['MEDV'])
dataset_altered_features=X.values.astype(float)
dataset_altered_features

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(dataset_altered_features,dataset_altered_target,test_size=0.1,random_state=100)
print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)
print(X_train.dtype)
print(y_test.dtype)

def accu(y_pred,y_test):
    return np.sum(y_pred==y_test)/len(y_test)

# Experiment 4
model = LR_ClosedForm()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
rmse=np.sqrt(np.mean((y_pred-y_test)**2))
print("RMSE IS:",rmse)
print("Coeff are:",model.coeff)

# Experiment 5
rmse_vals=[]
iters=[0.0001,0.01,0.1]
for i in iters:
    model2=LR_Gradient(learning_rate=i,num_iter= 20)
    model2.fit(X_train,y_train)
    y_pred2=model2.predict(X_test)
    rmse2=np.sqrt(np.mean((y_pred2-y_test)**2))
    print("rmse values are:",rmse2)
    rmse_vals.append(rmse2)

best_rate=iters[np.argmin(rmse_vals)]
print(best_rate)

