# -*- coding: utf-8 -*-
"""Assign_6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12nEpuuI8HE6NLmvF43SJgjfSGqWcaAD8
"""

from keras.datasets import mnist
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

(x_train, y_train), (x_test, y_test) = mnist.load_data()

x_train = x_train.reshape((len(x_train), -1))
x_test = x_test.reshape((len(x_test), -1))
x_train = x_train / 255
x_test = x_test / 255

x_train = x_train[:10000]
y_train = y_train[:10000]
x_test = x_test[:2000]
y_test = y_test[:2000]

from sklearn.svm import SVC
from sklearn.metrics import classification_report

# Create SVC classifiers with different kernels
svc_linear = SVC(kernel='linear')
svc_poly = SVC(kernel='poly')
svc_rbf = SVC(kernel='rbf')

svc_linear.fit(x_train, y_train)
svc_poly.fit(x_train, y_train)
svc_rbf.fit(x_train, y_train)

y_pred_linear = svc_linear.predict(x_test)
y_pred_poly = svc_poly.predict(x_test)
y_pred_rbf = svc_rbf.predict(x_test)

report_linear = classification_report(y_test, y_pred_linear)
report_poly = classification_report(y_test, y_pred_poly)
report_rbf = classification_report(y_test, y_pred_rbf)

print("Classification Report for SVC with Linear Kernel:")
print(report_linear)
print("-----------------------------------------------------")
print("Classification Report for SVC with Polynomial Kernel:")
print(report_poly)
print("-----------------------------------------------------")
print("Classification Report for SVC with RBF Kernel:")
print(report_rbf)

from sklearn.model_selection import GridSearchCV, RandomizedSearchCV

param_grid = {'C': [0.1, 1, 10, 100], 'gamma': [1, 0.1, 0.01, 0.001]}

svc = SVC()

grid_search = GridSearchCV(svc, param_grid, cv=5)
grid_search.fit(x_train, y_train)

best_params_grid = grid_search.best_params_
print("Best hyperparameters from GridSearchCV:", best_params_grid)

random_search = RandomizedSearchCV(svc, param_distributions=param_grid, n_iter=10, cv=5)
random_search.fit(x_train, y_train)

best_params_random = random_search.best_params_
print("Best hyperparameters from RandomizedSearchCV:", best_params_random)

from sklearn.metrics import confusion_matrix
model=SVC(kernel='rbf', C=best_params_grid['C'], gamma=best_params_grid['gamma'])
model.fit(x_train,y_train)
y_pred=model.predict(x_test)
report_rbf_best = classification_report(y_test, y_pred)
print("Classification Report for SVC with RBF Kernel (Best Hyperparameters from GridSearchCV):")
print(report_rbf_best)

import seaborn as sns
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Reds')
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

from sklearn.datasets import fetch_california_housing
from sklearn.svm import SVR

df=fetch_california_housing()
df

X = df.data
y = df.target

from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error as MSE
x2_train,x2_test,y2_train,y2_test=train_test_split(X,y,test_size=0.2,random_state=42)
model2=SVR(epsilon=0.5)
model2.fit(x2_train,y2_train)
y2_pred=model2.predict(x2_test)
mse=MSE(y2_test,y2_pred)
print("Mean Squared Error is:",mse)

plt.figure(figsize=(10, 6))
plt.scatter(y2_test, y2_pred, color='blue', alpha=0.5)
plt.plot([min(y2_test), max(y2_test)], [min(y2_test), max(y2_test)], color='red', linestyle='--')
plt.title('SVR Predictions vs. Ground Truth')
plt.xlabel('Ground Truth')
plt.ylabel('Predictions')
plt.show()

epsilon_values = np.arange(0, 2.6, 0.1)

param_grid = {'epsilon': epsilon_values}

svr = SVR()

grid_search = GridSearchCV(svr, param_grid, cv=2)
grid_search.fit(x2_train, y2_train)

best_epsilon = grid_search.best_params_['epsilon']
print("Best Epsilon (Îµ) parameter:", best_epsilon)

model3=SVR(epsilon=best_epsilon)
model3.fit(x2_train,y2_train)
y3_pred=model3.predict(x2_test)
mse2=MSE(y2_test,y3_pred)
print("Mean Squared Error is:",mse2)

plt.figure(figsize=(10, 6))
plt.scatter(y2_test, y3_pred, color='blue', alpha=0.5)
plt.plot([min(y2_test), max(y2_test)], [min(y2_test), max(y2_test)], color='red', linestyle='--')
plt.title('SVR Predictions vs. Ground Truth')
plt.xlabel('Ground Truth')
plt.ylabel('Predictions')
plt.show()

